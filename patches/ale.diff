diff --git a/ale_linters/ada/adalsp.vim b/ale_linters/ada/adalsp.vim
new file mode 100644
index 0000000..10c4be0
--- /dev/null
+++ b/ale_linters/ada/adalsp.vim
@@ -0,0 +1,16 @@
+" Author: Bartek Jasicki http://github.com/thindil
+" Description: Support for Ada Language Server
+
+call ale#Set('ada_lsp_executable', 'ada_language_server')
+
+function! ale_linters#ada#adalsp#GetRootDirectory(buffer) abort
+    return fnamemodify(bufname(a:buffer), ':p:h')
+endfunction
+
+call ale#linter#Define('ada', {
+\   'name': 'adalsp',
+\   'lsp': 'stdio',
+\   'executable': {b -> ale#Var(b, 'ada_lsp_executable')},
+\   'command': '%e',
+\   'project_root': function('ale_linters#ada#adalsp#GetRootDirectory'),
+\})
diff --git a/ale_linters/ada/gnatmake.vim b/ale_linters/ada/gnatmake.vim
new file mode 100644
index 0000000..f019991
--- /dev/null
+++ b/ale_linters/ada/gnatmake.vim
@@ -0,0 +1,53 @@
+" Author: Bartek Jasicki http://github.com/thindil
+" Description: Lint Ada files with gnatmake
+
+call ale#Set('ada_gnatmake_executable', 'gnatmake')
+
+" -gnatwa: activate most optional warnings
+" -gnatq: try semantic analysis even if syntax errors have been found
+call ale#Set('ada_gnatmake_options', '-gnatwa -gnatq')
+
+function! ale_linters#ada#gnatmake#GetCommand(buffer) abort
+    " Build a suitable output file name. The output file is specified because
+    " the .ali file may be created even if no code generation is attempted.
+    " The output file name must match the source file name (except for the
+    " extension), so here we cannot use the null file as output.
+    let l:tmp_dir = fnamemodify(ale#command#CreateDirectory(a:buffer), ':p')
+    let l:out_file = l:tmp_dir . fnamemodify(bufname(a:buffer), ':t:r') . '.o'
+
+    " -gnatc: Check syntax and semantics only (no code generation attempted)
+    return '%e -c -gnatc '
+    \   . ale#Pad(ale#Var(a:buffer, 'ada_gcc_options'))
+    \   . ' -o ' . ale#Escape(l:out_file)
+    \   . ' ' . ale#Escape(fnamemodify(bufname(a:buffer), ':p'))
+endfunction
+
+" For the message format please refer to:
+"   https://gcc.gnu.org/onlinedocs/gnat_ugn/Output-and-Error-Message-Control.html
+"   https://gcc.gnu.org/onlinedocs/gnat_ugn/Warning-Message-Control.html
+function! ale_linters#ada#gnatmake#Handle(buffer, lines) abort
+    " Error format: <filename>:<lnum>:<col>: <text>
+    " Warning format: <filename>:<lnum>:<col>: warning: <text>
+    let l:re = '\v(.+):([0-9]+):([0-9]+):\s+(warning:)?\s*(.+)\s*'
+    let l:output = []
+
+    for l:match in ale#util#GetMatches(a:lines, l:re)
+        call add(l:output, {
+        \   'bufnr': a:buffer,
+        \   'lnum': str2nr(l:match[2]),
+        \   'col': str2nr(l:match[3]),
+        \   'type': l:match[4] is# 'warning:' ? 'W' : 'E',
+        \   'text': l:match[5],
+        \})
+    endfor
+
+    return l:output
+endfunction
+
+call ale#linter#Define('ada', {
+\   'name': 'gnatmake',
+\   'output_stream': 'stderr',
+\   'executable': {b -> ale#Var(b, 'ada_gnatmake_executable')},
+\   'command': function('ale_linters#ada#gcc#GetCommand'),
+\   'callback': 'ale_linters#ada#gnatmake#Handle',
+\})
